from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
import json
import os

LANG_FILE = "fitbuddy_lang.json"
PREMIUM_FILE = "fitbuddy_premium.json"

if os.path.exists(LANG_FILE):
    with open(LANG_FILE, "r") as f:
        user_lang = json.load(f)
else:
    user_lang = {}

if os.path.exists(PREMIUM_FILE):
    with open(PREMIUM_FILE, "r") as f:
        premium_users = json.load(f)
else:
    premium_users = {}

def save(path, data):
    with open(path, "w") as f:
        json.dump(data, f)

lang_buttons = ReplyKeyboardMarkup(
    [[KeyboardButton("English"), KeyboardButton("–†—É—Å—Å–∫–∏–π")]], resize_keyboard=True
)

menus = {
    "en": ReplyKeyboardMarkup(
        [[
            KeyboardButton("üî• Calories"), KeyboardButton("üìÜ Plan"),
        ], [
            KeyboardButton("üìà Weight"), KeyboardButton("üç≤ Recipes")
        ], [
            KeyboardButton("‚úÖ Habits"), KeyboardButton("‚è∞ Reminders")
        ], [
            KeyboardButton("üíé Premium")
        ]],
        resize_keyboard=True,
    ),
    "ru": ReplyKeyboardMarkup(
        [[
            KeyboardButton("üî• –ö–∞–ª–æ—Ä–∏–∏"), KeyboardButton("üìÜ –ü–ª–∞–Ω"),
        ], [
            KeyboardButton("üìà –í–µ—Å"), KeyboardButton("üç≤ –†–µ—Ü–µ–ø—Ç—ã")
        ], [
            KeyboardButton("‚úÖ –ü—Ä–∏–≤—ã—á–∫–∏"), KeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        ], [
            KeyboardButton("üíé –ü—Ä–µ–º–∏—É–º")
        ]],
        resize_keyboard=True,
    ),
}

texts = {
    "en": {
        "start": "Welcome! Choose your language:",
        "menu": "Main Menu",
        "already_premium": "‚úÖ You already have Premium.",
        "premium_ad": (
            "üíé Premium Features Include:\n"
            "‚Ä¢ Smart reminders\n"
            "‚Ä¢ Export history\n"
            "‚Ä¢ Personal plans\n"
            "‚Ä¢ No ads\n\n"
            "üëâ To get Premium, pay via ZoodPay or Payme and send /confirm @username"
        ),
        "confirm_hint": "Please provide a username, e.g. /confirm @john",
        "confirmed": "‚úÖ Premium activated for {user}!",
        "notify": "‚úÖ You have been granted Premium access. Thank you!",
    },
    "ru": {
        "start": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "menu": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "already_premium": "‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ü—Ä–µ–º–∏—É–º.",
        "premium_ad": (
            "üíé –í –ü—Ä–µ–º–∏—É–º –≤—Ö–æ–¥—è—Ç:\n"
            "‚Ä¢ –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
            "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã\n"
            "‚Ä¢ –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã\n\n"
            "üëâ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ü—Ä–µ–º–∏—É–º, –æ–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ ZoodPay –∏–ª–∏ Payme –∏ –Ω–∞–ø–∏—à–∏—Ç–µ /confirm @username"
        ),
        "confirm_hint": "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä /confirm @user",
        "confirmed": "‚úÖ –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è {user}!",
        "notify": "‚úÖ –í–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω Premium-–¥–æ—Å—Ç—É–ø. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!",
    }
}

LANGUAGE = 1

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(texts["en"]["start"], reply_markup=lang_buttons)
    return LANGUAGE

async def set_lang(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    lang = "en" if update.message.text == "English" else "ru"
    user_lang[user_id] = lang
    save(LANG_FILE, user_lang)
    await update.message.reply_text(texts[lang]["menu"], reply_markup=menus[lang])
    return ConversationHandler.END

async def premium(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    lang = user_lang.get(user_id, "en")
    if user_id in premium_users:
        await update.message.reply_text(texts[lang]["already_premium"])
    else:
        await update.message.reply_text(texts[lang]["premium_ad"], parse_mode="Markdown")

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(texts["en"]["confirm_hint"])
        return
    target_username = context.args[0]
    target_id = context.user_data.get("id", "")
    if target_username:
        premium_users[target_username] = True
        save(PREMIUM_FILE, premium_users)
        await update.message.reply_text(texts["en"]["confirmed"].format(user=target_username))
        try:
            await context.bot.send_message(chat_id=target_id, text=texts["en"]["notify"])
        except:
            pass

def main():
    app = ApplicationBuilder().token("PASTE_YOUR_BOT_TOKEN").build()

    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_lang)]},
        fallbacks=[]
    ))
    app.add_handler(CommandHandler("confirm", confirm))
    app.add_handler(MessageHandler(filters.Regex("^(üíé Premium|üíé –ü—Ä–µ–º–∏—É–º)$"), premium))

    app.run_polling()

if __name__ == "__main__":
    main()