from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)
import datetime

# –°–æ—Å—Ç–æ—è–Ω–∏—è
WEIGHT, HEIGHT, AGE, GENDER, GOAL = range(5)
PLAN_GOAL, PLAN_PLACE, PLAN_DAYS = range(10, 13)
REMIND_TEXT = 20
PROGRESS_WEIGHT = 30
CHECKLIST_RESPONSE = 40

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
user_lang = {}
user_progress = {}
user_checklist = {}
premium_users = set()

# –ö–Ω–æ–ø–∫–∏
main_menu = ReplyKeyboardMarkup(
    [
        ["üî• –ö–∞–ª–æ—Ä–∏–∏", "üìÜ –ü–ª–∞–Ω"],
        ["üìà –í–µ—Å", "üçΩÔ∏è –†–µ—Ü–µ–ø—Ç—ã"],
        ["‚úÖ –ü—Ä–∏–≤—ã—á–∫–∏", "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"],
        ["üíé –ü—Ä–µ–º–∏—É–º"]
    ],
    resize_keyboard=True
)

# === START ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_lang[user_id] = "ru"
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø FitBuddy ‚Äì —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ===
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üî• –ö–∞–ª–æ—Ä–∏–∏":
        await update.message.reply_text("–í–≤–µ–¥–∏ –≤–µ—Å (–∫–≥):")
        return WEIGHT
    elif text == "üìÜ –ü–ª–∞–Ω":
        await update.message.reply_text("–¶–µ–ª—å? (–ø–æ—Ö—É–¥–µ–Ω–∏–µ / –º–∞—Å—Å–∞ / –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ):")
        return PLAN_GOAL
    elif text == "üìà –í–µ—Å":
        await update.message.reply_text("–í–≤–µ–¥–∏ —Ç–µ–∫—É—â–∏–π –≤–µ—Å:")
        return PROGRESS_WEIGHT
    elif text == "üçΩÔ∏è –†–µ—Ü–µ–ø—Ç—ã":
        await update.message.reply_text("ü•ó –†–µ—Ü–µ–ø—Ç –ü–ü: –æ–≤—Å—è–Ω–∫–∞ + –±–∞–Ω–∞–Ω + –æ—Ä–µ—Ö–∏ = 350 –∫–∫–∞–ª")
    elif text == "‚úÖ –ü—Ä–∏–≤—ã—á–∫–∏":
        uid = update.effective_user.id
        user_checklist[uid] = {"–≤–æ–¥–∞": False, "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞": False}
        await update.message.reply_text("–ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–ª —Å–µ–≥–æ–¥–Ω—è? –≤–æ–¥–∞ / —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
        return CHECKLIST_RESPONSE
    elif text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        await update.message.reply_text("–ß—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å?")
        return REMIND_TEXT
    elif text == "üíé –ü—Ä–µ–º–∏—É–º":
        uid = str(update.effective_user.id)
        if uid in premium_users:
            await update.message.reply_text("‚úÖ –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø Premium.")
        else:
            await update.message.reply_text(
                "üíé Premium:\n"
                "- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n- –≠–∫—Å–ø–æ—Ä—Ç\n- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã\n\n"
                "–û–ø–ª–∞—Ç–∞:\nPayme: 5614 6835 1617 4125\nZoodPay: zoodpay.com/pay/fitbuddy\n\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏ /confirm @username",
                parse_mode="Markdown"
            )

# === PREMIUM CONFIRM ===
async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–í–≤–µ–¥–∏: /confirm @username")
        return
    username = context.args[0].replace("@", "")
    premium_users.add(username)
    await update.message.reply_text(f"‚úÖ Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è {username}")

# === CALORIES ===
async def get_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["weight"] = float(update.message.text)
    await update.message.reply_text("–†–æ—Å—Ç (—Å–º):")
    return HEIGHT

async def get_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["height"] = float(update.message.text)
    await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç:")
    return AGE

async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["age"] = int(update.message.text)
    await update.message.reply_text("–ü–æ–ª (–º/–∂):")
    return GENDER

async def get_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    gender = update.message.text.lower()
    if gender not in ["–º", "–∂"]:
        await update.message.reply_text("–í–≤–µ–¥–∏ –º –∏–ª–∏ –∂")
        return GENDER
    context.user_data["gender"] = gender
    await update.message.reply_text("–¶–µ–ª—å? (–º–∞—Å—Å–∞ / –ø–æ—Ö—É–¥–µ–Ω–∏–µ / –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ):")
    return GOAL

async def get_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    goal = update.message.text.lower()
    w, h, a, g = context.user_data["weight"], context.user_data["height"], context.user_data["age"], context.user_data["gender"]
    bmr = 10 * w + 6.25 * h - 5 * a + (5 if g == "–º" else -161)
    cal = bmr + 300 if goal == "–º–∞—Å—Å–∞" else bmr - 300 if goal == "–ø–æ—Ö—É–¥–µ–Ω–∏–µ" else bmr
    await update.message.reply_text(f"‚úÖ –¢–≤–æ—è –Ω–æ—Ä–º–∞: {int(cal)} –∫–∫–∞–ª")
    return ConversationHandler.END

# === PLAN ===
async def plan_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["goal"] = update.message.text.lower()
    await update.message.reply_text("–ì–¥–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è? (–¥–æ–º / –∑–∞–ª):")
    return PLAN_PLACE

async def plan_place(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["place"] = update.message.text.lower()
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è?")
    return PLAN_DAYS

async def plan_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    days = int(update.message.text)
    goal = context.user_data["goal"]
    place = context.user_data["place"]
    plan = f"üìã –ü–ª–∞–Ω ({goal}, {place}, {days} –¥–Ω):\n"
    for i in range(1, days + 1):
        if goal == "–º–∞—Å—Å–∞":
            content = "–°–∏–ª–æ–≤–∞—è"
        elif goal == "–ø–æ—Ö—É–¥–µ–Ω–∏–µ":
            content = "–ö–∞—Ä–¥–∏–æ"
        else:
            content = "–§—É–ª–ª–±–æ–¥–∏"
        plan += f"–î–µ–Ω—å {i}: {content} ({place})\n"
    await update.message.reply_text(plan)
    return ConversationHandler.END

# === REMINDER ===
async def handle_remind(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {update.message.text} (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    return ConversationHandler.END

# === PROGRESS ===
async def save_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    weight = float(update.message.text)
    date = datetime.date.today().isoformat()
    if uid not in user_progress:
        user_progress[uid] = []
    user_progress[uid].append((date, weight))
    await update.message.reply_text(f"‚úÖ –í–µ—Å {weight} –∫–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ({date})")
    return ConversationHandler.END

# === CHECKLIST ===
async def handle_checklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    uid = update.effective_user.id
    if uid not in user_checklist:
        user_checklist[uid] = {"–≤–æ–¥–∞": False, "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞": False}
    if text in user_checklist[uid]:
        user_checklist[uid][text] = True
    ch = user_checklist[uid]
    await update.message.reply_text(f"üíß –í–æ–¥–∞: {'‚úÖ' if ch['–≤–æ–¥–∞'] else '‚ùå'}\nüèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {'‚úÖ' if ch['—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞'] else '‚ùå'}")
    return ConversationHandler.END

# === CANCEL ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# === –ó–ê–ü–£–°–ö ===
app = ApplicationBuilder().token("8079877045:AAFW4YjWO9plFtC8FoV4_G_W1K_SgAlIwYw").build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("confirm", confirm))

app.add_handler(ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^üî• –ö–∞–ª–æ—Ä–∏–∏$"), handle_button)],
    states={
        WEIGHT: [MessageHandler(filters.TEXT, get_weight)],
        HEIGHT: [MessageHandler(filters.TEXT, get_height)],
        AGE: [MessageHandler(filters.TEXT, get_age)],
        GENDER: [MessageHandler(filters.TEXT, get_gender)],
        GOAL: [MessageHandler(filters.TEXT, get_goal)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
))

app.add_handler(ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^üìÜ –ü–ª–∞–Ω$"), handle_button)],
    states={
        PLAN_GOAL: [MessageHandler(filters.TEXT, plan_goal)],
        PLAN_PLACE: [MessageHandler(filters.TEXT, plan_place)],
        PLAN_DAYS: [MessageHandler(filters.TEXT, plan_days)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
))

app.add_handler(ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^üìà –í–µ—Å$"), handle_button)],
    states={
        PROGRESS_WEIGHT: [MessageHandler(filters.TEXT, save_progress)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
))

app.add_handler(ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^‚úÖ –ü—Ä–∏–≤—ã—á–∫–∏$"), handle_button)],
    states={
        CHECKLIST_RESPONSE: [MessageHandler(filters.TEXT, handle_checklist)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
))

app.add_handler(ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ$"), handle_button)],
    states={
        REMIND_TEXT: [MessageHandler(filters.TEXT, handle_remind)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
))

app.add_handler(MessageHandler(filters.Regex("^(üçΩÔ∏è –†–µ—Ü–µ–ø—Ç—ã|üíé –ü—Ä–µ–º–∏—É–º)$"), handle_button))

print("‚úÖ –ë–æ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–ø—É—â–µ–Ω")
app.run_polling()
