from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)
import datetime

# –°–æ—Å—Ç–æ—è–Ω–∏—è
MENU, WEIGHT, HEIGHT, AGE, GENDER, GOAL = range(6)
PLAN_GOAL, PLAN_PLACE, PLAN_DAYS = range(10, 13)
REMIND_TEXT = 20
PROGRESS_WEIGHT = 30
CHECKLIST_RESPONSE = 40

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
user_progress = {}
user_checklist = {}
premium_users = set()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
menu_keyboard = ReplyKeyboardMarkup([
    ["üî• –ö–∞–ª–æ—Ä–∏–∏", "üìã –ü–ª–∞–Ω"],
    ["‚öñÔ∏è –í–µ—Å", "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"],
    ["üçΩÔ∏è –†–µ—Ü–µ–ø—Ç—ã", "‚úÖ –ü—Ä–∏–≤—ã—á–∫–∏"],
    ["üíé –ü—Ä–µ–º–∏—É–º"]
], resize_keyboard=True)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FitBuddy!\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)
    return MENU

# /confirm
async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /confirm @username")
        return
    username = context.args[0].replace("@", "")
    premium_users.add(username)
    await update.message.reply_text(f"‚úÖ Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è {username}")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üî• –ö–∞–ª–æ—Ä–∏–∏":
        await update.message.reply_text("–í–≤–µ–¥–∏ –≤–µ—Å (–∫–≥):")
        return WEIGHT

    elif text == "üìã –ü–ª–∞–Ω":
        await update.message.reply_text("–¶–µ–ª—å? (–ø–æ—Ö—É–¥–µ–Ω–∏–µ / –º–∞—Å—Å–∞ / –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ):")
        return PLAN_GOAL

    elif text == "‚öñÔ∏è –í–µ—Å":
        await update.message.reply_text("–í–≤–µ–¥–∏ —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–∫–≥):")
        return PROGRESS_WEIGHT

    elif text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        await update.message.reply_text("–ß—Ç–æ —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å?")
        return REMIND_TEXT

    elif text == "üçΩÔ∏è –†–µ—Ü–µ–ø—Ç—ã":
        await update.message.reply_text("ü•ó –û–≤—Å—è–Ω–∫–∞ + –±–∞–Ω–∞–Ω + –æ—Ä–µ—Ö–∏ = 350 –∫–∫–∞–ª")
        return MENU

    elif text == "‚úÖ –ü—Ä–∏–≤—ã—á–∫–∏":
        uid = update.effective_user.id
        user_checklist[uid] = {"–≤–æ–¥–∞": False, "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞": False}
        await update.message.reply_text("–ß—Ç–æ —Å–¥–µ–ª–∞–ª? –ù–∞–ø–∏—à–∏: –≤–æ–¥–∞ / —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
        return CHECKLIST_RESPONSE

    elif text == "üíé –ü—Ä–µ–º–∏—É–º":
        uid = str(update.effective_user.id)
        if uid in premium_users:
            await update.message.reply_text("‚úÖ –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å Premium.")
        else:
            await update.message.reply_text(
                "üíé *Premium-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
                "- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã\n- –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n\n"
                "–û–ø–ª–∞—Ç–∞:\nPayme: 5614 6835 1617 4125\nZoodPay: https://zoodpay.com/pay/fitbuddy\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: /confirm @username",
                parse_mode="Markdown"
            )
        return MENU

    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é.")
        return MENU

# === –ö–∞–ª–æ—Ä–∏–∏ ===
async def get_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["weight"] = float(update.message.text)
        await update.message.reply_text("–†–æ—Å—Ç (—Å–º):")
        return HEIGHT
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return WEIGHT

async def get_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["height"] = float(update.message.text)
        await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç:")
        return AGE
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return HEIGHT

async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["age"] = int(update.message.text)
        await update.message.reply_text("–ü–æ–ª (–º/–∂):")
        return GENDER
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return AGE

async def get_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    gender = update.message.text.lower()
    if gender not in ["–º", "–∂"]:
        await update.message.reply_text("–í–≤–µ–¥–∏ '–º' –∏–ª–∏ '–∂'")
        return GENDER
    context.user_data["gender"] = gender
    await update.message.reply_text("–¶–µ–ª—å? (–º–∞—Å—Å–∞ / –ø–æ—Ö—É–¥–µ–Ω–∏–µ / –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ):")
    return GOAL

async def get_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    goal = update.message.text.lower()
    if goal not in ["–º–∞—Å—Å–∞", "–ø–æ—Ö—É–¥–µ–Ω–∏–µ", "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ"]:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å.")
        return GOAL
    d = context.user_data
    bmr = 10 * d["weight"] + 6.25 * d["height"] - 5 * d["age"] + (5 if d["gender"] == '–º' else -161)
    result = bmr + 300 if goal == "–º–∞—Å—Å–∞" else bmr - 300 if goal == "–ø–æ—Ö—É–¥–µ–Ω–∏–µ" else bmr
    await update.message.reply_text(f"‚úÖ –¢–≤–æ—è —Å—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞: {int(result)} –∫–∫–∞–ª", reply_markup=menu_keyboard)
    return MENU

# === –ü–ª–∞–Ω ===
async def get_plan_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["goal"] = update.message.text.lower()
    await update.message.reply_text("–ì–¥–µ —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è? (–¥–æ–º / –∑–∞–ª):")
    return PLAN_PLACE

async def get_plan_place(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["place"] = update.message.text.lower()
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è?")
    return PLAN_DAYS

async def get_plan_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        days = int(update.message.text)
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return PLAN_DAYS
    g = context.user_data["goal"]
    p = context.user_data["place"]
    msg = f"üìã –ü–ª–∞–Ω ({g}, {p}, {days} –¥–Ω–µ–π):\n"
    for i in range(1, days + 1):
        block = "–ö–∞—Ä–¥–∏–æ" if g == "–ø–æ—Ö—É–¥–µ–Ω–∏–µ" else "–°–∏–ª–æ–≤–∞—è" if g == "–º–∞—Å—Å–∞" else "–§—É–ª–ª–±–æ–¥–∏"
        msg += f"–î–µ–Ω—å {i}: {block} ({p})\n"
    await update.message.reply_text(msg, reply_markup=menu_keyboard)
    return MENU

# === –í–µ—Å ===
async def save_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        weight = float(update.message.text)
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return PROGRESS_WEIGHT
    uid = update.effective_user.id
    date = datetime.date.today().isoformat()
    user_progress.setdefault(uid, []).append((date, weight))
    await update.message.reply_text(f"‚úÖ –í–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {weight} –∫–≥ ({date})", reply_markup=menu_keyboard)
    return MENU

# === –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ===
async def save_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ): {update.message.text}", reply_markup=menu_keyboard)
    return MENU

# === –ü—Ä–∏–≤—ã—á–∫–∏ ===
async def checklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    uid = update.effective_user.id
    if uid not in user_checklist:
        user_checklist[uid] = {"–≤–æ–¥–∞": False, "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞": False}
    if text in user_checklist[uid]:
        user_checklist[uid][text] = True
    d = user_checklist[uid]
    await update.message.reply_text(
        f"üíß –í–æ–¥–∞: {'‚úÖ' if d['–≤–æ–¥–∞'] else '‚ùå'}\nüèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {'‚úÖ' if d['—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞'] else '‚ùå'}",
        reply_markup=menu_keyboard
    )
    return MENU

# === –û—Ç–º–µ–Ω–∞ ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_keyboard)
    return MENU

# === –ó–∞–ø—É—Å–∫ ===
app = ApplicationBuilder().token("8079877045:AAGycBqKchETAqCigVcT0Vgz0rXoq8-swpI").build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("confirm", confirm))

app.add_handler(ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu)],
        WEIGHT: [MessageHandler(filters.TEXT, get_weight)],
        HEIGHT: [MessageHandler(filters.TEXT, get_height)],
        AGE: [MessageHandler(filters.TEXT, get_age)],
        GENDER: [MessageHandler(filters.TEXT, get_gender)],
        GOAL: [MessageHandler(filters.TEXT, get_goal)],
        PLAN_GOAL: [MessageHandler(filters.TEXT, get_plan_goal)],
        PLAN_PLACE: [MessageHandler(filters.TEXT, get_plan_place)],
        PLAN_DAYS: [MessageHandler(filters.TEXT, get_plan_days)],
        PROGRESS_WEIGHT: [MessageHandler(filters.TEXT, save_weight)],
        REMIND_TEXT: [MessageHandler(filters.TEXT, save_reminder)],
        CHECKLIST_RESPONSE: [MessageHandler(filters.TEXT, checklist)],
    },
    fallbacks=[CommandHandler("cancel", cancel)]
))

print("‚úÖ FitBuddy –∑–∞–ø—É—â–µ–Ω")
app.run_polling()
