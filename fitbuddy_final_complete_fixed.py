from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)
import datetime

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
WEIGHT, HEIGHT, AGE, GENDER, GOAL = range(5)
PLAN_GOAL, PLAN_PLACE, PLAN_DAYS = range(10, 13)
REMIND_TEXT = 20
PROGRESS_WEIGHT = 30
CHECKLIST_RESPONSE = 40

user_progress = {}
user_checklist = {}

main_menu = ReplyKeyboardMarkup(
    keyboard=[["üî• –ö–∞–ª–æ—Ä–∏–∏", "üìã –ü–ª–∞–Ω"], ["‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "üìà –í–µ—Å"], ["üçΩÔ∏è –†–µ—Ü–µ–ø—Ç—ã", "‚úÖ –ü—Ä–∏–≤—ã—á–∫–∏"]],
    resize_keyboard=True
)

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø FitBuddy ‚Äì —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–ø–æ–º–æ—â–Ω–∏–∫!\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å–Ω–∏–∑—É ‚¨áÔ∏è",
        reply_markup=main_menu
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞-–∫–Ω–æ–ø–æ–∫ ===
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üî• –ö–∞–ª–æ—Ä–∏–∏":
        await update.message.reply_text("–í–≤–µ–¥–∏ –≤–µ—Å (–∫–≥):")
        return WEIGHT
    elif text == "üìã –ü–ª–∞–Ω":
        await update.message.reply_text("–¶–µ–ª—å? (–ø–æ—Ö—É–¥–µ–Ω–∏–µ / –º–∞—Å—Å–∞ / –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ):")
        return PLAN_GOAL
    elif text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        await update.message.reply_text("–ß—Ç–æ —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å?")
        return REMIND_TEXT
    elif text == "üìà –í–µ—Å":
        await update.message.reply_text("–í–≤–µ–¥–∏ —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–∫–≥):")
        return PROGRESS_WEIGHT
    elif text == "üçΩÔ∏è –†–µ—Ü–µ–ø—Ç—ã":
        await update.message.reply_text("ü•ó –û–º–ª–µ—Ç —Å –æ–≤–æ—â–∞–º–∏: 2 —è–π—Ü–∞, –ø–µ—Ä–µ—Ü, –ø–æ–º–∏–¥–æ—Ä, –∑–µ–ª–µ–Ω—å.")
    elif text == "‚úÖ –ü—Ä–∏–≤—ã—á–∫–∏":
        user_checklist[update.effective_user.id] = {"–≤–æ–¥–∞": False, "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞": False}
        await update.message.reply_text("–ß—Ç–æ —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª? (–≤–æ–¥–∞ / —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞)")
        return CHECKLIST_RESPONSE

# === –ö–∞–ª–æ—Ä–∏–∏ ===
async def get_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["weight"] = float(update.message.text)
        await update.message.reply_text("–†–æ—Å—Ç (—Å–º):")
        return HEIGHT
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return WEIGHT

async def get_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["height"] = float(update.message.text)
        await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç:")
        return AGE
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return HEIGHT

async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["age"] = int(update.message.text)
        await update.message.reply_text("–ü–æ–ª (–º/–∂):")
        return GENDER
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return AGE

async def get_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    g = update.message.text.lower()
    if g not in ['–º', '–∂']:
        await update.message.reply_text("–í–≤–µ–¥–∏ '–º' –∏–ª–∏ '–∂'")
        return GENDER
    context.user_data["gender"] = g
    await update.message.reply_text("–¶–µ–ª—å? (–º–∞—Å—Å–∞ / –ø–æ—Ö—É–¥–µ–Ω–∏–µ / –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ):")
    return GOAL

async def get_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    goal = update.message.text.lower()
    if goal not in ['–º–∞—Å—Å–∞', '–ø–æ—Ö—É–¥–µ–Ω–∏–µ', '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ']:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ: –º–∞—Å—Å–∞, –ø–æ—Ö—É–¥–µ–Ω–∏–µ, –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ.")
        return GOAL

    w = context.user_data["weight"]
    h = context.user_data["height"]
    a = context.user_data["age"]
    g = context.user_data["gender"]
    bmr = 10 * w + 6.25 * h - 5 * a + (5 if g == '–º' else -161)

    if goal == "–º–∞—Å—Å–∞":
        calories = bmr + 300
    elif goal == "–ø–æ—Ö—É–¥–µ–Ω–∏–µ":
        calories = bmr - 300
    else:
        calories = bmr

    await update.message.reply_text(f"–¢–≤–æ—è —Å—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞: {int(calories)} –∫–∫–∞–ª.")
    return ConversationHandler.END

# === –ü–ª–∞–Ω ===
async def plan_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    goal = update.message.text.lower()
    if goal not in ['–ø–æ—Ö—É–¥–µ–Ω–∏–µ', '–º–∞—Å—Å–∞', '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ']:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏: –ø–æ—Ö—É–¥–µ–Ω–∏–µ, –º–∞—Å—Å–∞, –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ.")
        return PLAN_GOAL
    context.user_data["goal"] = goal
    await update.message.reply_text("–ì–¥–µ —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è? (–¥–æ–º / –∑–∞–ª):")
    return PLAN_PLACE

async def plan_place(update: Update, context: ContextTypes.DEFAULT_TYPE):
    place = update.message.text.lower()
    if place not in ['–¥–æ–º', '–∑–∞–ª']:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏: –¥–æ–º –∏–ª–∏ –∑–∞–ª.")
        return PLAN_PLACE
    context.user_data["place"] = place
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é?")
    return PLAN_DAYS

async def plan_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        days = int(update.message.text)
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return PLAN_DAYS

    goal = context.user_data["goal"]
    place = context.user_data["place"]
    text = f"üìã –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ({goal}, {place}, {days} –¥–Ω–µ–π):\n"
    for i in range(1, days + 1):
        content = "–ö–∞—Ä–¥–∏–æ" if goal == "–ø–æ—Ö—É–¥–µ–Ω–∏–µ" else "–°–∏–ª–æ–≤–∞—è" if goal == "–º–∞—Å—Å–∞" else "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è"
        text += f"–î–µ–Ω—å {i}: {content} ({place})\n"
    await update.message.reply_text(text)
    return ConversationHandler.END

# === –ü—Ä–æ—á–∏–µ ===
async def handle_remind(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    await update.message.reply_text(f"–ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å: '{text}' (–≤ –±—É–¥—É—â–µ–º).")
    return ConversationHandler.END

async def save_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        weight = float(update.message.text)
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return PROGRESS_WEIGHT
    uid = update.effective_user.id
    date = datetime.date.today().isoformat()
    user_progress.setdefault(uid, []).append((date, weight))
    await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {weight} –∫–≥ ({date})")
    return ConversationHandler.END

async def handle_checklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    uid = update.effective_user.id
    if uid not in user_checklist:
        user_checklist[uid] = {"–≤–æ–¥–∞": False, "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞": False}
    if text in user_checklist[uid]:
        user_checklist[uid][text] = True
    cl = user_checklist[uid]
    await update.message.reply_text(
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–Ω—è:\nüíß –í–æ–¥–∞: {'‚úÖ' if cl['–≤–æ–¥–∞'] else '‚ùå'}\nüèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {'‚úÖ' if cl['—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞'] else '‚ùå'}"
    )
    return ConversationHandler.END

# === –ó–∞–ø—É—Å–∫ ===
app = ApplicationBuilder().token("8079877045:AAGsksKjDXs22kSu1nJOkY4J8F44Zij4N_s").build()

app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))

# –í—Å–µ –≤–µ—Ç–∫–∏
app.add_handler(ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^üî• –ö–∞–ª–æ—Ä–∏–∏$"), handle_buttons)],
    states={
        WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_weight)],
        HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_height)],
        AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
        GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_gender)],
        GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_goal)],
    },
    fallbacks=[]
))

app.add_handler(ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^üìã –ü–ª–∞–Ω$"), handle_buttons)],
    states={
        PLAN_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, plan_goal)],
        PLAN_PLACE: [MessageHandler(filters.TEXT & ~filters.COMMAND, plan_place)],
        PLAN_DAYS: [MessageHandler(filters.TEXT & ~filters.COMMAND, plan_days)],
    },
    fallbacks=[]
))

app.add_handler(ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ$"), handle_buttons)],
    states={REMIND_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_remind)]},
    fallbacks=[]
))

app.add_handler(ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^üìà –í–µ—Å$"), handle_buttons)],
    states={PROGRESS_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_progress)]},
    fallbacks=[]
))

app.add_handler(ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^‚úÖ –ü—Ä–∏–≤—ã—á–∫–∏$"), handle_buttons)],
    states={CHECKLIST_RESPONSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_checklist)]},
    fallbacks=[]
))

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
app.run_polling()
