from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)
import datetime

# –°–æ—Å—Ç–æ—è–Ω–∏—è
WEIGHT, HEIGHT, AGE, GENDER, GOAL = range(5)
PLAN_GOAL, PLAN_PLACE, PLAN_DAYS = range(10, 13)
REMIND_TEXT = 20
PROGRESS_WEIGHT = 30
CHECKLIST_RESPONSE = 40

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
user_progress = {}
user_checklist = {}
premium_users = set()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup([
    ["üî• –ö–∞–ª–æ—Ä–∏–∏", "üìã –ü–ª–∞–Ω"],
    ["‚öñÔ∏è –í–µ—Å", "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"],
    ["üçΩÔ∏è –†–µ—Ü–µ–ø—Ç—ã", "‚úÖ –ü—Ä–∏–≤—ã—á–∫–∏"],
    ["üíé –ü—Ä–µ–º–∏—É–º"]
], resize_keyboard=True)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø FitBuddy.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

# === PREMIUM ===
async def premium(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid in premium_users:
        await update.message.reply_text("‚úÖ –£ —Ç–µ–±—è —É–∂–µ Premium.")
    else:
        await update.message.reply_text(
            "üíé Premium –≤–∫–ª—é—á–∞–µ—Ç:\n"
            "- –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω\n- –≠–∫—Å–ø–æ—Ä—Ç –≤–µ—Å–∞\n\n"
            "–û–ø–ª–∞—Ç–∞:\nPayme: 5614 6835 1617 4125\nZoodPay: zoodpay.com/pay/fitbuddy\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: /confirm @username",
            parse_mode="Markdown"
        )

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /confirm @username")
        return
    username = context.args[0].replace("@", "")
    premium_users.add(username)
    await update.message.reply_text(f"‚úÖ Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è {username}")

# === –ö–ê–õ–û–†–ò–ò ===
async def start_calories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ –≤–µ—Å (–∫–≥):")
    return WEIGHT

async def get_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["weight"] = float(update.message.text)
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return WEIGHT
    await update.message.reply_text("–†–æ—Å—Ç (—Å–º):")
    return HEIGHT

async def get_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["height"] = float(update.message.text)
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return HEIGHT
    await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç:")
    return AGE

async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["age"] = int(update.message.text)
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return AGE
    await update.message.reply_text("–ü–æ–ª (–º/–∂):")
    return GENDER

async def get_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    g = update.message.text.lower()
    if g not in ["–º", "–∂"]:
        await update.message.reply_text("–í–≤–µ–¥–∏ '–º' –∏–ª–∏ '–∂'")
        return GENDER
    context.user_data["gender"] = g
    await update.message.reply_text("–¶–µ–ª—å? (–º–∞—Å—Å–∞ / –ø–æ—Ö—É–¥–µ–Ω–∏–µ / –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ):")
    return GOAL

async def get_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    goal = update.message.text.lower()
    if goal not in ["–º–∞—Å—Å–∞", "–ø–æ—Ö—É–¥–µ–Ω–∏–µ", "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ"]:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏: –º–∞—Å—Å–∞, –ø–æ—Ö—É–¥–µ–Ω–∏–µ, –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ")
        return GOAL
    d = context.user_data
    bmr = 10 * d["weight"] + 6.25 * d["height"] - 5 * d["age"] + (5 if d["gender"] == "–º" else -161)
    calories = bmr + 300 if goal == "–º–∞—Å—Å–∞" else bmr - 300 if goal == "–ø–æ—Ö—É–¥–µ–Ω–∏–µ" else bmr
    await update.message.reply_text(f"‚úÖ –¢–≤–æ—è –Ω–æ—Ä–º–∞: {int(calories)} –∫–∫–∞–ª", reply_markup=main_menu)
    return ConversationHandler.END

# === –ü–õ–ê–ù ===
async def start_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–¶–µ–ª—å? (–º–∞—Å—Å–∞ / –ø–æ—Ö—É–¥–µ–Ω–∏–µ / –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ):")
    return PLAN_GOAL

async def plan_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["goal"] = update.message.text.lower()
    await update.message.reply_text("–ì–¥–µ —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è? (–¥–æ–º / –∑–∞–ª):")
    return PLAN_PLACE

async def plan_place(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["place"] = update.message.text.lower()
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é?")
    return PLAN_DAYS

async def plan_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        days = int(update.message.text)
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return PLAN_DAYS
    g = context.user_data["goal"]
    p = context.user_data["place"]
    plan = f"üìã –ü–ª–∞–Ω ({g}, {p}, {days} –¥–Ω–µ–π):\n"
    for i in range(1, days + 1):
        content = "–ö–∞—Ä–¥–∏–æ" if g == "–ø–æ—Ö—É–¥–µ–Ω–∏–µ" else "–°–∏–ª–æ–≤–∞—è" if g == "–º–∞—Å—Å–∞" else "–§—É–ª–ª–±–æ–¥–∏"
        plan += f"–î–µ–Ω—å {i}: {content} ({p})\n"
    await update.message.reply_text(plan, reply_markup=main_menu)
    return ConversationHandler.END

# === –í–ï–° ===
async def start_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–∫–≥):")
    return PROGRESS_WEIGHT

async def save_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        weight = float(update.message.text)
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return PROGRESS_WEIGHT
    uid = update.effective_user.id
    date = datetime.date.today().isoformat()
    user_progress.setdefault(uid, []).append((date, weight))
    await update.message.reply_text(f"‚úÖ –í–µ—Å –∑–∞–ø–∏—Å–∞–Ω: {weight} –∫–≥ ({date})", reply_markup=main_menu)
    return ConversationHandler.END

# === –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï ===
async def start_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ß—Ç–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å?")
    return REMIND_TEXT

async def save_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ): {update.message.text}", reply_markup=main_menu)
    return ConversationHandler.END

# === –ü–†–ò–í–´–ß–ö–ò ===
async def start_checklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    user_checklist[uid] = {"–≤–æ–¥–∞": False, "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞": False}
    await update.message.reply_text("–ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–ª? –ù–∞–ø–∏—à–∏: –≤–æ–¥–∞ / —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
    return CHECKLIST_RESPONSE

async def handle_checklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    uid = update.effective_user.id
    if text in user_checklist[uid]:
        user_checklist[uid][text] = True
    ch = user_checklist[uid]
    await update.message.reply_text(f"üíß –í–æ–¥–∞: {'‚úÖ' if ch['–≤–æ–¥–∞'] else '‚ùå'}\nüèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {'‚úÖ' if ch['—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞'] else '‚ùå'}", reply_markup=main_menu)
    return ConversationHandler.END

# === –†–ï–¶–ï–ü–¢ ===
async def recipes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üçΩÔ∏è –†–µ—Ü–µ–ø—Ç: –æ–º–ª–µ—Ç + –æ–≤–æ—â–∏ + –∑–µ–ª–µ–Ω—å = 250 –∫–∫–∞–ª", reply_markup=main_menu)

# === –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö ===
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    match update.message.text:
        case "üî• –ö–∞–ª–æ—Ä–∏–∏":
            return await start_calories(update, context)
        case "üìã –ü–ª–∞–Ω":
            return await start_plan(update, context)
        case "‚öñÔ∏è –í–µ—Å":
            return await start_progress(update, context)
        case "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
            return await start_reminder(update, context)
        case "‚úÖ –ü—Ä–∏–≤—ã—á–∫–∏":
            return await start_checklist(update, context)
        case "üçΩÔ∏è –†–µ—Ü–µ–ø—Ç—ã":
            return await recipes(update, context)
        case "üíé –ü—Ä–µ–º–∏—É–º":
            return await premium(update, context)
        case _:
            await update.message.reply_text("‚ùó –í—ã–±–µ—Ä–∏ –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu)

# === –ó–ê–ü–£–°–ö ===
app = ApplicationBuilder().token("8079877045:AAFnfzySxIX7OIJXNeIOkhlMH8p0oijQPFA").build()

# –°—Ç–∞—Ä—Ç –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("confirm", confirm))

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))

# –ú–æ–¥—É–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
app.add_handler(ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^üî• –ö–∞–ª–æ—Ä–∏–∏$"), start_calories)],
    states={
        WEIGHT: [MessageHandler(filters.TEXT, get_weight)],
        HEIGHT: [MessageHandler(filters.TEXT, get_height)],
        AGE: [MessageHandler(filters.TEXT, get_age)],
        GENDER: [MessageHandler(filters.TEXT, get_gender)],
        GOAL: [MessageHandler(filters.TEXT, get_goal)],
    },
    fallbacks=[]
))

app.add_handler(ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^üìã –ü–ª–∞–Ω$"), start_plan)],
    states={
        PLAN_GOAL: [MessageHandler(filters.TEXT, plan_goal)],
        PLAN_PLACE: [MessageHandler(filters.TEXT, plan_place)],
        PLAN_DAYS: [MessageHandler(filters.TEXT, plan_days)],
    },
    fallbacks=[]
))

app.add_handler(ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^‚öñÔ∏è –í–µ—Å$"), start_progress)],
    states={PROGRESS_WEIGHT: [MessageHandler(filters.TEXT, save_progress)]},
    fallbacks=[]
))

app.add_handler(ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ$"), start_reminder)],
    states={REMIND_TEXT: [MessageHandler(filters.TEXT, save_reminder)]},
    fallbacks=[]
))

app.add_handler(ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^‚úÖ –ü—Ä–∏–≤—ã—á–∫–∏$"), start_checklist)],
    states={CHECKLIST_RESPONSE: [MessageHandler(filters.TEXT, handle_checklist)]},
    fallbacks=[]
))

print("‚úÖ FitBuddy –º–æ–¥—É–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω")
app.run_polling()
