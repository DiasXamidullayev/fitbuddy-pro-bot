from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)
import datetime

# –°–æ—Å—Ç–æ—è–Ω–∏—è
WEIGHT, HEIGHT, AGE, GENDER, GOAL = range(5)
PLAN_GOAL, PLAN_PLACE, PLAN_DAYS = range(10, 13)
REMIND_TEXT = 20
PROGRESS_WEIGHT = 30
CHECKLIST_RESPONSE = 40

# –î–∞–Ω–Ω—ã–µ
user_progress = {}
user_checklist = {}
premium_users = set()

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø FitBuddy ‚Äì —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç üí™\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/calories ‚Äì —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π\n"
        "/plan ‚Äì –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        "/remind ‚Äì —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/progress ‚Äì –∑–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å\n"
        "/recipes ‚Äì –ü–ü-—Ä–µ—Ü–µ–ø—Ç—ã\n"
        "/checklist ‚Äì –ø—Ä–∏–≤—ã—á–∫–∏ –¥–Ω—è\n"
        "/premium ‚Äì –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Premium\n"
        "/confirm ‚Äì –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã\n"
        "/cancel ‚Äì –æ—Ç–º–µ–Ω–∏—Ç—å\n"
        "/help ‚Äì –ø–æ–º–æ—â—å"
    )

# === Premium ===
async def premium(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id in premium_users:
        await update.message.reply_text("‚úÖ –£ —Ç–µ–±—è —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω Premium!")
    else:
        await update.message.reply_text(
            "üíé *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Premium:*\n"
            "- –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
            "- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω\n"
            "- –≠–∫—Å–ø–æ—Ä—Ç –≤–µ—Å–∞\n"
            "- –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n\n"
            "üí≥ –û–ø–ª–∞—Ç–∞:\n"
            "- Payme: 5614 6835 1617 4125\n"
            "- ZoodPay: https://zoodpay.com/pay/fitbuddy-premium\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /confirm @–≤–∞—àusername",
            parse_mode="Markdown"
        )

# === –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã ===
async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ: /confirm @username")
        return
    username = context.args[0].replace("@", "")
    premium_users.add(username)
    await update.message.reply_text(f"‚úÖ Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è {username}")

# === –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ===
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("/start, /calories, /plan, /remind, /progress, /recipes, /checklist, /cancel")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# === /calories ===
async def calories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ –≤–µ—Å (–∫–≥):")
    return WEIGHT

async def get_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["weight"] = float(update.message.text)
    await update.message.reply_text("–†–æ—Å—Ç (—Å–º):")
    return HEIGHT

async def get_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["height"] = float(update.message.text)
    await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç:")
    return AGE

async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["age"] = int(update.message.text)
    await update.message.reply_text("–ü–æ–ª (–º/–∂):")
    return GENDER

async def get_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    gender = update.message.text.lower()
    if gender not in ['–º', '–∂']:
        await update.message.reply_text("–í–≤–µ–¥–∏ '–º' –∏–ª–∏ '–∂'")
        return GENDER
    context.user_data["gender"] = gender
    await update.message.reply_text("–¶–µ–ª—å? (–º–∞—Å—Å–∞ / –ø–æ—Ö—É–¥–µ–Ω–∏–µ / –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ):")
    return GOAL

async def get_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    goal = update.message.text.lower()
    if goal not in ['–º–∞—Å—Å–∞', '–ø–æ—Ö—É–¥–µ–Ω–∏–µ', '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ']:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏: –º–∞—Å—Å–∞, –ø–æ—Ö—É–¥–µ–Ω–∏–µ, –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ")
        return GOAL
    w, h, a, g = context.user_data["weight"], context.user_data["height"], context.user_data["age"], context.user_data["gender"]
    bmr = 10 * w + 6.25 * h - 5 * a + (5 if g == '–º' else -161)
    calories = bmr + 300 if goal == "–º–∞—Å—Å–∞" else bmr - 300 if goal == "–ø–æ—Ö—É–¥–µ–Ω–∏–µ" else bmr
    await update.message.reply_text(f"‚úÖ –°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞: {int(calories)} –∫–∫–∞–ª")
    return ConversationHandler.END

# === /plan ===
async def plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–¶–µ–ª—å? (–ø–æ—Ö—É–¥–µ–Ω–∏–µ / –º–∞—Å—Å–∞ / –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ):")
    return PLAN_GOAL

async def plan_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["goal"] = update.message.text.lower()
    await update.message.reply_text("–ì–¥–µ —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è? (–¥–æ–º / –∑–∞–ª):")
    return PLAN_PLACE

async def plan_place(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["place"] = update.message.text.lower()
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é?")
    return PLAN_DAYS

async def plan_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    days = int(update.message.text)
    goal, place = context.user_data["goal"], context.user_data["place"]
    plan_text = f"üìã –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ({goal}, {place}, {days}/–Ω–µ–¥):\n"
    for i in range(1, days + 1):
        if goal == "–ø–æ—Ö—É–¥–µ–Ω–∏–µ":
            content = "–ö–∞—Ä–¥–∏–æ + –ø—Ä–µ—Å—Å"
        elif goal == "–º–∞—Å—Å–∞":
            content = "–°–∏–ª–æ–≤–∞—è: –≥—Ä—É–¥—å/—Å–ø–∏–Ω–∞/–Ω–æ–≥–∏"
        else:
            content = "–§—É–ª–ª–±–æ–¥–∏"
        plan_text += f"–î–µ–Ω—å {i}: {content} ({place})\n"
    await update.message.reply_text(plan_text)
    return ConversationHandler.END

# === /remind ===
async def remind(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ß—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å?")
    return REMIND_TEXT

async def handle_remind(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"‚è∞ –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å: {update.message.text} (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    return ConversationHandler.END

# === /progress ===
async def progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å:")
    return PROGRESS_WEIGHT

async def save_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    weight = float(update.message.text)
    date = datetime.date.today().isoformat()
    if user_id not in user_progress:
        user_progress[user_id] = []
    user_progress[user_id].append((date, weight))
    await update.message.reply_text(f"‚úÖ –í–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {weight} –∫–≥ ({date})")
    return ConversationHandler.END

# === /recipes ===
async def recipes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü•ó –†–µ—Ü–µ–ø—Ç –ü–ü:\n- –û–≤—Å—è–Ω–∫–∞ + –±–∞–Ω–∞–Ω + –æ—Ä–µ—Ö–∏ = 350 –∫–∫–∞–ª")

# === /checklist ===
async def checklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_checklist[update.effective_user.id] = {"–≤–æ–¥–∞": False, "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞": False}
    await update.message.reply_text("–ß—Ç–æ —Å–¥–µ–ª–∞–ª: –≤–æ–¥–∞ / —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
    return CHECKLIST_RESPONSE

async def handle_checklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    uid = update.effective_user.id
    if uid not in user_checklist:
        user_checklist[uid] = {"–≤–æ–¥–∞": False, "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞": False}
    if text in user_checklist[uid]:
        user_checklist[uid][text] = True
    ch = user_checklist[uid]
    await update.message.reply_text(f"üíß –í–æ–¥–∞: {'‚úÖ' if ch['–≤–æ–¥–∞'] else '‚ùå'}\nüèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {'‚úÖ' if ch['—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞'] else '‚ùå'}")
    return ConversationHandler.END

# === –ó–∞–ø—É—Å–∫ ===
app = ApplicationBuilder().token("PASTE_YOUR_BOT_TOKEN").build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("recipes", recipes))
app.add_handler(CommandHandler("premium", premium))
app.add_handler(CommandHandler("confirm", confirm))

app.add_handler(ConversationHandler(
    entry_points=[CommandHandler("calories", calories)],
    states={
        WEIGHT: [MessageHandler(filters.TEXT, get_weight)],
        HEIGHT: [MessageHandler(filters.TEXT, get_height)],
        AGE: [MessageHandler(filters.TEXT, get_age)],
        GENDER: [MessageHandler(filters.TEXT, get_gender)],
        GOAL: [MessageHandler(filters.TEXT, get_goal)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
))

app.add_handler(ConversationHandler(
    entry_points=[CommandHandler("plan", plan)],
    states={
        PLAN_GOAL: [MessageHandler(filters.TEXT, plan_goal)],
        PLAN_PLACE: [MessageHandler(filters.TEXT, plan_place)],
        PLAN_DAYS: [MessageHandler(filters.TEXT, plan_days)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
))

app.add_handler(ConversationHandler(
    entry_points=[CommandHandler("remind", remind)],
    states={REMIND_TEXT: [MessageHandler(filters.TEXT, handle_remind)]},
    fallbacks=[CommandHandler("cancel", cancel)],
))

app.add_handler(ConversationHandler(
    entry_points=[CommandHandler("progress", progress)],
    states={PROGRESS_WEIGHT: [MessageHandler(filters.TEXT, save_progress)]},
    fallbacks=[CommandHandler("cancel", cancel)],
))

app.add_handler(ConversationHandler(
    entry_points=[CommandHandler("checklist", checklist)],
    states={CHECKLIST_RESPONSE: [MessageHandler(filters.TEXT, handle_checklist)]},
    fallbacks=[CommandHandler("cancel", cancel)],
))

print("‚úÖ FitBuddy –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()
