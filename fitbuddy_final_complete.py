
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)
import json, os

LANGUAGE, CAL_W, CAL_H, CAL_A, CAL_G, CAL_Goal = range(6)
user_names = {}

LANG_FILE = "user_lang.json"
PREMIUM_FILE = "premium_users.json"

def load(file): return json.load(open(file)) if os.path.exists(file) else {}
def save(file, data): json.dump(data, open(file, "w"), ensure_ascii=False, indent=2)

user_lang = load(LANG_FILE)
premium_users = load(PREMIUM_FILE)

texts = {
    "en": {
        "start": "üëã Welcome to FitBuddy! Choose your language:",
        "menu": "üèãÔ∏è‚Äç‚ôÇÔ∏è Main Menu ‚Äî choose an action:",
        "already_premium": "üíé You already have Premium access.",
        "premium_ad": "üíé *Premium Features Include:*

"
                      "‚Ä¢ Smart workout reminders
"
                      "‚Ä¢ Export progress to PDF
"
                      "‚Ä¢ Unlimited weight tracking
"
                      "‚Ä¢ Personalized calorie plans

"
                      "*To activate Premium:*
"
                      "üåç ZoodPay: https://zoodpay.com/pay/fitbuddy-premium
"
                      "üá∫üáø Payme: 5614 6835 1617 4125 (Xamidullayev Dias)

"
                      "Send payment screenshot to unlock access.",
        "not_premium": "üö´ This is a Premium-only feature. Use /premium to upgrade.",
        "cal_q1": "Enter your weight (kg):",
        "cal_q2": "Now your height (cm):",
        "cal_q3": "Your age:",
        "cal_q4": "Gender (m/f):",
        "cal_q5": "Goal? (gain / lose / maintain):",
        "cal_result": "‚úÖ Your daily calorie need: {cal} kcal",
        "plan": "üìÜ Weekly Plan:
Mon - Cardio
Wed - Strength
Fri - Core + Stretch",
        "progress": "‚úÖ Weight saved!",
        "recipe": "üçΩÔ∏è Try: oats + banana + peanut butter (~350 kcal)",
        "checklist": "‚úÖ Daily Checklist: water? workout?",
        "reminder_promo": "‚è∞ Premium reminders help you stay consistent.
Use /premium to unlock."
    },
    "ru": {
        "start": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FitBuddy! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "menu": "üèãÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "already_premium": "üíé –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å Premium-–¥–æ—Å—Ç—É–ø.",
        "premium_ad": "üíé *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Premium:*

"
                      "‚Ä¢ –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
"
                      "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ PDF
"
                      "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –≤–µ—Å–∞
"
                      "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –∫–∞–ª–æ—Ä–∏–π

"
                      "*–ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å Premium:*
"
                      "üåç ZoodPay: https://zoodpay.com/pay/fitbuddy-premium
"
                      "üá∫üáø Payme: 5614 6835 1617 4125 (Xamidullayev Dias)

"
                      "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç ‚Äî –º—ã –æ—Ç–∫—Ä–æ–µ–º –¥–æ—Å—Ç—É–ø.",
        "not_premium": "üö´ –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Premium. –í–≤–µ–¥–∏—Ç–µ /premium –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.",
        "cal_q1": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–∫–≥):",
        "cal_q2": "–¢–µ–ø–µ—Ä—å –≤–∞—à —Ä–æ—Å—Ç (—Å–º):",
        "cal_q3": "–í–æ–∑—Ä–∞—Å—Ç:",
        "cal_q4": "–ü–æ–ª (–º/–∂):",
        "cal_q5": "–¶–µ–ª—å? (–Ω–∞–±–æ—Ä / –ø–æ—Ö—É–¥–µ–Ω–∏–µ / –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ):",
        "cal_result": "‚úÖ –í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {cal} –∫–∫–∞–ª",
        "plan": "üìÜ –ü–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é:
–ü–Ω - –ö–∞—Ä–¥–∏–æ
–°—Ä - –°–∏–ª–æ–≤–∞—è
–ü—Ç - –ö–æ—Ä + –†–∞—Å—Ç—è–∂–∫–∞",
        "progress": "‚úÖ –í–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
        "recipe": "üçΩÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: –æ–≤—Å—è–Ω–∫–∞ + –±–∞–Ω–∞–Ω + –∞—Ä–∞—Ö–∏—Å (~350 –∫–∫–∞–ª)",
        "checklist": "‚úÖ –ß–µ–∫–ª–∏—Å—Ç: –≤–æ–¥–∞? —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?",
        "reminder_promo": "‚è∞ –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ Premium.
–í–≤–µ–¥–∏—Ç–µ /premium –¥–ª—è –¥–æ—Å—Ç—É–ø–∞."
    }
}

lang_buttons = ReplyKeyboardMarkup(
    [[KeyboardButton("English"), KeyboardButton("–†—É—Å—Å–∫–∏–π")]],
    resize_keyboard=True
)

menus = {
    "en": ReplyKeyboardMarkup(
        [["üî• Calories", "üìÜ Plan"], ["üìà Weight", "üç≤ Recipes"], ["‚úÖ Habits", "‚è∞ Reminders"], ["üíé Premium"]],
        resize_keyboard=True
    ),
    "ru": ReplyKeyboardMarkup(
        [["üî• –ö–∞–ª–æ—Ä–∏–∏", "üìÜ –ü–ª–∞–Ω"], ["üìà –í–µ—Å", "üç≤ –†–µ—Ü–µ–ø—Ç—ã"], ["‚úÖ –ü—Ä–∏–≤—ã—á–∫–∏", "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"], ["üíé –ü—Ä–µ–º–∏—É–º"]],
        resize_keyboard=True
    )
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    lang = user_lang.get(user_id, "en")
    await update.message.reply_text(texts[lang]["start"], reply_markup=lang_buttons)
    return LANGUAGE

async def set_lang(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    lang = "en" if update.message.text.lower() == "english" else "ru"
    user_lang[user_id] = lang
    save(LANG_FILE, user_lang)
    await update.message.reply_text(texts[lang]["menu"], reply_markup=menus[lang])
    return ConversationHandler.END

async def premium(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    lang = user_lang.get(user_id, "en")
    if user_id in premium_users:
        await update.message.reply_text(texts[lang]["already_premium"])
    else:
        await update.message.reply_text(texts[lang]["premium_ad"], parse_mode="Markdown")

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó Use /confirm @username")
        return
    target_username = context.args[0].lstrip("@")
    target_id = user_names.get(f"@{target_username}")
    if target_id:
        premium_users[target_id] = True
        save(PREMIUM_FILE, premium_users)
        await update.message.reply_text(f"‚úÖ Premium activated for {target_username}")
        await context.bot.send_message(chat_id=target_id, text="üíé Premium activated. Thank you!")
    else:
        await update.message.reply_text("‚ùó User not found or not started the bot.")

async def handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_names[f"@{update.effective_user.username}"] = user_id
    lang = user_lang.get(user_id, "en")
    msg = update.message.text

    if msg in ["üìÜ Plan", "–ü–ª–∞–Ω"]:
        await update.message.reply_text(texts[lang]["plan"])
    elif msg in ["üìà Weight", "–í–µ—Å"]:
        await update.message.reply_text(texts[lang]["progress"])
    elif msg in ["üç≤ Recipes", "–†–µ—Ü–µ–ø—Ç—ã"]:
        await update.message.reply_text(texts[lang]["recipe"])
    elif msg in ["‚úÖ Habits", "–ü—Ä–∏–≤—ã—á–∫–∏"]:
        await update.message.reply_text(texts[lang]["checklist"])
    elif msg in ["‚è∞ Reminders", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"]:
        await update.message.reply_text(texts[lang]["reminder_promo"])
    elif msg in ["üíé Premium", "–ü—Ä–µ–º–∏—É–º"]:
        await premium(update, context)
    elif msg in ["üî• Calories", "–ö–∞–ª–æ—Ä–∏–∏"]:
        await update.message.reply_text(texts[lang]["cal_q1"])
        return CAL_W

    return ConversationHandler.END

async def calories_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    lang = user_lang.get(user_id, "en")
    context.user_data["weight"] = float(update.message.text)
    await update.message.reply_text(texts[lang]["cal_q2"])
    return CAL_H

async def cal_h(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    lang = user_lang.get(user_id, "en")
    context.user_data["height"] = float(update.message.text)
    await update.message.reply_text(texts[lang]["cal_q3"])
    return CAL_A

async def cal_a(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    lang = user_lang.get(user_id, "en")
    context.user_data["age"] = int(update.message.text)
    await update.message.reply_text(texts[lang]["cal_q4"])
    return CAL_G

async def cal_g(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(texts[user_lang.get(str(update.effective_user.id), "en")]["cal_q5"])
    context.user_data["gender"] = update.message.text.lower()
    return CAL_Goal

async def cal_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data
    goal = update.message.text.lower()
    cal = 10 * data["weight"] + 6.25 * data["height"] - 5 * data["age"]
    cal += 5 if data["gender"] == "m" else -161
    if goal == "gain" or goal == "–Ω–∞–±–æ—Ä": cal += 300
    elif goal == "lose" or goal == "–ø–æ—Ö—É–¥–µ–Ω–∏–µ": cal -= 300
    lang = user_lang.get(str(update.effective_user.id), "en")
    await update.message.reply_text(texts[lang]["cal_result"].format(cal=int(cal)))
    return ConversationHandler.END

if __name__ == "__main__":
    app = ApplicationBuilder().token("8079877045:AAFW4YjWO9plFtC8FoV4_G_W1K_SgAlIwYw").build()
    lang_conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_lang)]},
        fallbacks=[]
    )
    cal_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, handler)],
        states={
            CAL_W: [MessageHandler(filters.TEXT & ~filters.COMMAND, calories_step)],
            CAL_H: [MessageHandler(filters.TEXT & ~filters.COMMAND, cal_h)],
            CAL_A: [MessageHandler(filters.TEXT & ~filters.COMMAND, cal_a)],
            CAL_G: [MessageHandler(filters.TEXT & ~filters.COMMAND, cal_g)],
            CAL_Goal: [MessageHandler(filters.TEXT & ~filters.COMMAND, cal_goal)],
        },
        fallbacks=[]
    )

    app.add_handler(lang_conv)
    app.add_handler(cal_conv)
    app.add_handler(CommandHandler("premium", premium))
    app.add_handler(CommandHandler("confirm", confirm))
    app.run_polling()
