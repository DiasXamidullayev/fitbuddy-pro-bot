from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)
import json
import os

LANGUAGE, CAL_W, CAL_H, CAL_A, CAL_G, CAL_Goal = range(6)

LANG_FILE = "user_lang.json"
PREMIUM_FILE = "premium_users.json"

def load(file): return json.load(open(file)) if os.path.exists(file) else {}
def save(file, data): json.dump(data, open(file, "w"), ensure_ascii=False, indent=2)

user_lang = load(LANG_FILE)
premium_users = load(PREMIUM_FILE)

lang_buttons = ReplyKeyboardMarkup([[KeyboardButton("English üá¨üáß"), KeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫")]], resize_keyboard=True)

menus = {
    "en": ReplyKeyboardMarkup(
        [["üî• Calories", "üìÜ Plan"], ["üìà Progress", "üçΩÔ∏è Recipes"], ["‚úÖ Checklist", "‚è∞ Reminder"], ["üíé Premium"]],
        resize_keyboard=True),
    "ru": ReplyKeyboardMarkup(
        [["üî• –ö–∞–ª–æ—Ä–∏–∏", "üìÜ –ü–ª–∞–Ω"], ["üìà –í–µ—Å", "üçΩÔ∏è –†–µ—Ü–µ–ø—Ç—ã"], ["‚úÖ –ü—Ä–∏–≤—ã—á–∫–∏", "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"], ["üíé –ü—Ä–µ–º–∏—É–º"]],
        resize_keyboard=True)
}
texts = {
    "en": {
        "start": "üëã Welcome to FitBuddy! Choose your language:",
        "menu": "Choose an action:",
        "not_premium": "üö´ This feature is Premium only. Use /premium to upgrade.",
        "premium": "üí≥ Get Premium: https://your-payment-link.com",
        "already_premium": "üíé You already have Premium.",
        "cal_q1": "Enter your weight (kg):",
        "cal_q2": "Now your height (cm):",
        "cal_q3": "Your age:",
        "cal_q4": "Gender (m/f):",
        "cal_q5": "Goal? (gain / lose / maintain):",
        "cal_result": "‚úÖ Your daily calorie need: {cal} kcal",
        "plan_text": "üìÜ Weekly Plan:\n- Mon: Cardio\n- Wed: Strength\n- Fri: Full body",
        "progress_saved": "‚úÖ Your weight has been saved!",
        "recipe": "üçΩÔ∏è Sample recipe: Oats + banana + peanut butter (350 kcal)",
        "checklist": "‚úÖ What did you complete today? (water / workout)",
        "reminder_locked": "‚è∞ Smart reminders are Premium only."
    },
    "ru": {
        "start": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FitBuddy! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "menu": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "not_premium": "üö´ –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Premium. –í–≤–µ–¥–∏—Ç–µ /premium –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.",
        "premium": "üí≥ –ü–æ–ª—É—á–∏—Ç–µ Premium: https://your-payment-link.com",
        "already_premium": "üíé –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å Premium.",
        "cal_q1": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–∫–≥):",
        "cal_q2": "–¢–µ–ø–µ—Ä—å —Ä–æ—Å—Ç (—Å–º):",
        "cal_q3": "–í–æ–∑—Ä–∞—Å—Ç:",
        "cal_q4": "–ü–æ–ª (–º/–∂):",
        "cal_q5": "–¶–µ–ª—å? (–º–∞—Å—Å–∞ / –ø–æ—Ö—É–¥–µ–Ω–∏–µ / –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ):",
        "cal_result": "‚úÖ –í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: {cal} –∫–∫–∞–ª",
        "plan_text": "üìÜ –ü–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é:\n- –ü–Ω: –ö–∞—Ä–¥–∏–æ\n- –°—Ä: –°–∏–ª–æ–≤–∞—è\n- –ü—Ç: –í—Å—ë —Ç–µ–ª–æ",
        "progress_saved": "‚úÖ –í–µ—Å –∑–∞–ø–∏—Å–∞–Ω!",
        "recipe": "üçΩÔ∏è –ü—Ä–∏–º–µ—Ä: –æ–≤—Å—è–Ω–∫–∞ + –±–∞–Ω–∞–Ω + –∞—Ä–∞—Ö–∏—Å (350 –∫–∫–∞–ª)",
        "checklist": "‚úÖ –ß—Ç–æ –≤—ã —Å–¥–µ–ª–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è? (–≤–æ–¥–∞ / —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞)",
        "reminder_locked": "‚è∞ –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è Premium."
    }
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(texts["en"]["start"], reply_markup=lang_buttons)
    return LANGUAGE

async def set_lang(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    lang = "en" if "English" in update.message.text else "ru"
    user_lang[user_id] = lang
    save(LANG_FILE, user_lang)
    await update.message.reply_text(texts[lang]["menu"], reply_markup=menus[lang])
    return ConversationHandler.END

async def premium(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    lang = user_lang.get(user_id, "en")
    if user_id in premium_users:
        await update.message.reply_text(texts[lang]["already_premium"])
    else:
        await update.message.reply_text(texts[lang]["premium"])
        # === Calories (free)
async def calories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = user_lang.get(str(update.effective_user.id), "en")
    await update.message.reply_text(texts[lang]["cal_q1"])
    return CAL_W

async def cal_w(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["w"] = float(update.message.text)
    lang = user_lang.get(str(update.effective_user.id), "en")
    await update.message.reply_text(texts[lang]["cal_q2"])
    return CAL_H

async def cal_h(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["h"] = float(update.message.text)
    lang = user_lang.get(str(update.effective_user.id), "en")
    await update.message.reply_text(texts[lang]["cal_q3"])
    return CAL_A

async def cal_a(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["a"] = int(update.message.text)
    lang = user_lang.get(str(update.effective_user.id), "en")
    await update.message.reply_text(texts[lang]["cal_q4"])
    return CAL_G

async def cal_g(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["g"] = update.message.text.lower()
    lang = user_lang.get(str(update.effective_user.id), "en")
    await update.message.reply_text(texts[lang]["cal_q5"])
    return CAL_Goal

async def cal_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    goal = update.message.text.lower()
    w = context.user_data["w"]
    h = context.user_data["h"]
    a = context.user_data["a"]
    g = context.user_data["g"]
    lang = user_lang.get(str(update.effective_user.id), "en")
    bmr = 10 * w + 6.25 * h - 5 * a + (5 if g.startswith("m") or g == "–º" else -161)
    cal = bmr + 300 if "gain" in goal or "–º–∞—Å—Å–∞" in goal else bmr - 300 if "lose" in goal or "–ø–æ—Ö—É–¥" in goal else bmr
    await update.message.reply_text(texts[lang]["cal_result"].format(cal=int(cal)))
    return ConversationHandler.END

# === Handle menu
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    lang = user_lang.get(user_id, "en")
    text = update.message.text.lower()

    if "premium" in text or "–ø—Ä–µ–º–∏—É–º" in text:
        return await premium(update, context)
    elif "calories" in text or "–∫–∞–ª–æ—Ä–∏–∏" in text:
        return await calories(update, context)
    elif "plan" in text or "–ø–ª–∞–Ω" in text:
        await update.message.reply_text(texts[lang]["plan_text"])
    elif "progress" in text or "–≤–µ—Å" in text:
        await update.message.reply_text(texts[lang]["progress_saved"])
    elif "recipes" in text or "—Ä–µ—Ü–µ–ø—Ç—ã" in text:
        await update.message.reply_text(texts[lang]["recipe"])
    elif "check" in text or "–ø—Ä–∏–≤" in text:
        await update.message.reply_text(texts[lang]["checklist"])
    elif "remind" in text or "–Ω–∞–ø–æ" in text:
        await update.message.reply_text(texts[lang]["reminder_locked"])

# === Launch bot
app = ApplicationBuilder().token("YOUR_BOT_TOKEN_HERE").build()

app.add_handler(ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_lang)]},
    fallbacks=[]
))

app.add_handler(ConversationHandler(
    entry_points=[CommandHandler("calories", calories)],
    states={
        CAL_W: [MessageHandler(filters.TEXT & ~filters.COMMAND, cal_w)],
        CAL_H: [MessageHandler(filters.TEXT & ~filters.COMMAND, cal_h)],
        CAL_A: [MessageHandler(filters.TEXT & ~filters.COMMAND, cal_a)],
        CAL_G: [MessageHandler(filters.TEXT & ~filters.COMMAND, cal_g)],
        CAL_Goal: [MessageHandler(filters.TEXT & ~filters.COMMAND, cal_goal)],
    },
    fallbacks=[]
))

app.add_handler(CommandHandler("premium", premium))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))

print("‚úÖ FitBuddy Balanced Bot is running...")
app.run_polling()
